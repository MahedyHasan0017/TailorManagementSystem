A basic database structure for the scenario. Let's start with defining tables for users, roles, and permissions:

    Users Table
        user_id (Primary Key)
        username
        password_hash
        email
        role_id (Foreign Key to Roles Table)

    Roles Table
        role_id (Primary Key)
        role_name
        description

    Permissions Table
        permission_id (Primary Key)
        permission_name
        description

    Role_Permissions Table (Many-to-Many relationship between roles and permissions)
        role_id (Foreign Key to Roles Table)
        permission_id (Foreign Key to Permissions Table)

Now, let's extend this structure for your specific scenario:

    Departments Table
        department_id (Primary Key)
        department_name

    Admins Table
        admin_id (Primary Key)
        user_id (Foreign Key to Users Table)
        department_id (Foreign Key to Departments Table)

    Employees Table
        employee_id (Primary Key)
        user_id (Foreign Key to Users Table)
        admin_id (Foreign Key to Admins Table)

This structure allows for a hierarchical organization where a super admin can create admins, who in turn can create employees under their departments. Each user has a role assigned, and roles have associated permissions.

Here's an example of how you might populate these tables:

    Roles Table
        1 (Super Admin): Full control over everything.
        2 (Admin): Manage employees and their permissions within their department.
        3 (Employee): Access to specific modules based on admin's permissions.

    Permissions Table
        1 (Manage Employees): Create, update, and delete employees.
        2 (Manage Modules): Assign modules to employees.
        3 (View Reports): Access to reporting modules.
        ... (Add more permissions as needed)

    Role_Permissions Table
        (Super Admin Role, All Permissions)
        (Admin Role, Manage Employees)
        (Admin Role, Manage Modules)
        (Employee Role, View Reports)

This way, you can dynamically assign permissions to roles and manage users based on their roles and the department they belong to. The application developer can then implement logic to check permissions based on the user's role and the actions they are trying to perform.